from unittest import TestCase

from calvin.backtracking_dfs.permutation import Permutation


class TestPermutation(TestCase):
    def setUp(self):
        self.fixture = Permutation()

    def test_permute(self):
        input = [1, 2, 3, 2, 1]
        expected = [[1, 2, 3, 2, 1],
                 [1, 2, 3, 1, 2],
                 [1, 2, 2, 3, 1],
                 [1, 2, 2, 1, 3],
                 [1, 2, 1, 3, 2],
                 [1, 2, 1, 2, 3],
                 [1, 3, 2, 2, 1],
                 [1, 3, 2, 1, 2],
                 [1, 3, 2, 2, 1],
                 [1, 3, 2, 1, 2],
                 [1, 3, 1, 2, 2],
                 [1, 3, 1, 2, 2],
                 [1, 2, 2, 3, 1],
                 [1, 2, 2, 1, 3],
                 [1, 2, 3, 2, 1],
                 [1, 2, 3, 1, 2],
                 [1, 2, 1, 2, 3],
                 [1, 2, 1, 3, 2],
                 [1, 1, 2, 3, 2],
                 [1, 1, 2, 2, 3],
                 [1, 1, 3, 2, 2],
                 [1, 1, 3, 2, 2],
                 [1, 1, 2, 2, 3],
                 [1, 1, 2, 3, 2],
                 [2, 1, 3, 2, 1],
                 [2, 1, 3, 1, 2],
                 [2, 1, 2, 3, 1],
                 [2, 1, 2, 1, 3],
                 [2, 1, 1, 3, 2],
                 [2, 1, 1, 2, 3],
                 [2, 3, 1, 2, 1],
                 [2, 3, 1, 1, 2],
                 [2, 3, 2, 1, 1],
                 [2, 3, 2, 1, 1],
                 [2, 3, 1, 1, 2],
                 [2, 3, 1, 2, 1],
                 [2, 2, 1, 3, 1],
                 [2, 2, 1, 1, 3],
                 [2, 2, 3, 1, 1],
                 [2, 2, 3, 1, 1],
                 [2, 2, 1, 1, 3],
                 [2, 2, 1, 3, 1],
                 [2, 1, 1, 3, 2],
                 [2, 1, 1, 2, 3],
                 [2, 1, 3, 1, 2],
                 [2, 1, 3, 2, 1],
                 [2, 1, 2, 1, 3],
                 [2, 1, 2, 3, 1],
                 [3, 1, 2, 2, 1],
                 [3, 1, 2, 1, 2],
                 [3, 1, 2, 2, 1],
                 [3, 1, 2, 1, 2],
                 [3, 1, 1, 2, 2],
                 [3, 1, 1, 2, 2],
                 [3, 2, 1, 2, 1],
                 [3, 2, 1, 1, 2],
                 [3, 2, 2, 1, 1],
                 [3, 2, 2, 1, 1],
                 [3, 2, 1, 1, 2],
                 [3, 2, 1, 2, 1],
                 [3, 2, 1, 2, 1],
                 [3, 2, 1, 1, 2],
                 [3, 2, 2, 1, 1],
                 [3, 2, 2, 1, 1],
                 [3, 2, 1, 1, 2],
                 [3, 2, 1, 2, 1],
                 [3, 1, 1, 2, 2],
                 [3, 1, 1, 2, 2],
                 [3, 1, 2, 1, 2],
                 [3, 1, 2, 2, 1],
                 [3, 1, 2, 1, 2],
                 [3, 1, 2, 2, 1],
                 [2, 1, 2, 3, 1],
                 [2, 1, 2, 1, 3],
                 [2, 1, 3, 2, 1],
                 [2, 1, 3, 1, 2],
                 [2, 1, 1, 2, 3],
                 [2, 1, 1, 3, 2],
                 [2, 2, 1, 3, 1],
                 [2, 2, 1, 1, 3],
                 [2, 2, 3, 1, 1],
                 [2, 2, 3, 1, 1],
                 [2, 2, 1, 1, 3],
                 [2, 2, 1, 3, 1],
                 [2, 3, 1, 2, 1],
                 [2, 3, 1, 1, 2],
                 [2, 3, 2, 1, 1],
                 [2, 3, 2, 1, 1],
                 [2, 3, 1, 1, 2],
                 [2, 3, 1, 2, 1],
                 [2, 1, 1, 2, 3],
                 [2, 1, 1, 3, 2],
                 [2, 1, 2, 1, 3],
                 [2, 1, 2, 3, 1],
                 [2, 1, 3, 1, 2],
                 [2, 1, 3, 2, 1],
                 [1, 1, 2, 3, 2],
                 [1, 1, 2, 2, 3],
                 [1, 1, 3, 2, 2],
                 [1, 1, 3, 2, 2],
                 [1, 1, 2, 2, 3],
                 [1, 1, 2, 3, 2],
                 [1, 2, 1, 3, 2],
                 [1, 2, 1, 2, 3],
                 [1, 2, 3, 1, 2],
                 [1, 2, 3, 2, 1],
                 [1, 2, 2, 1, 3],
                 [1, 2, 2, 3, 1],
                 [1, 3, 1, 2, 2],
                 [1, 3, 1, 2, 2],
                 [1, 3, 2, 1, 2],
                 [1, 3, 2, 2, 1],
                 [1, 3, 2, 1, 2],
                 [1, 3, 2, 2, 1],
                 [1, 2, 1, 2, 3],
                 [1, 2, 1, 3, 2],
                 [1, 2, 2, 1, 3],
                 [1, 2, 2, 3, 1],
                 [1, 2, 3, 1, 2],
                 [1, 2, 3, 2, 1]]
        self.assertEqual(expected, self.fixture.permute(input))

    def test_permute_unique(self):
        input = [1, 2, 3, 2, 1]
        expected = [[1, 2, 3, 2, 1],
                 [1, 2, 3, 1, 2],
                 [1, 2, 2, 3, 1],
                 [1, 2, 2, 1, 3],
                 [1, 2, 1, 3, 2],
                 [1, 2, 1, 2, 3],
                 [1, 3, 2, 2, 1],
                 [1, 3, 2, 1, 2],
                 [1, 3, 1, 2, 2],
                 [1, 1, 2, 3, 2],
                 [1, 1, 2, 2, 3],
                 [1, 1, 3, 2, 2],
                 [2, 1, 3, 2, 1],
                 [2, 1, 3, 1, 2],
                 [2, 1, 2, 3, 1],
                 [2, 1, 2, 1, 3],
                 [2, 1, 1, 3, 2],
                 [2, 1, 1, 2, 3],
                 [2, 3, 1, 2, 1],
                 [2, 3, 1, 1, 2],
                 [2, 3, 2, 1, 1],
                 [2, 2, 1, 3, 1],
                 [2, 2, 1, 1, 3],
                 [2, 2, 3, 1, 1],
                 [3, 1, 2, 2, 1],
                 [3, 1, 2, 1, 2],
                 [3, 1, 1, 2, 2],
                 [3, 2, 1, 2, 1],
                 [3, 2, 1, 1, 2],
                 [3, 2, 2, 1, 1]]
        self.assertEqual(expected, self.fixture.permuteUnique(input))
